type Bar implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  name: String

  """Reads a single `Foo` that is related to this `Bar`."""
  foo: Foo
}

"""
A condition to be used against `Bar` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input BarCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `name` field."""
  name: String
}

"""Methods to use when ordering `Bar`."""
enum BarsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type Baz implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  name: String

  """Reads a single `Foo` that is related to this `Baz`."""
  foo: Foo
}

"""
A condition to be used against `Baz` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input BazCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `name` field."""
  name: String
}

"""Methods to use when ordering `Baz`."""
enum BazsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type Foo implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  barId: Int!
  bazId: Int!

  """Reads a single `Bar` that is related to this `Foo`."""
  bar: Bar

  """Reads a single `Baz` that is related to this `Foo`."""
  baz: Baz
}

"""
A condition to be used against `Foo` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input FooCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `barId` field."""
  barId: Int

  """Checks for equality with the object’s `bazId` field."""
  bazId: Int
}

"""Methods to use when ordering `Foo`."""
enum FoosOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  BAR_ID_ASC
  BAR_ID_DESC
  BAZ_ID_ASC
  BAZ_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""An object with a globally unique `ID`."""
interface Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
}

"""The root query type which gives access points into the data universe."""
type Query implements Node {
  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!

  """
  The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`.
  """
  nodeId: ID!

  """Fetches an object given its globally unique `ID`."""
  node(
    """The globally unique `ID`."""
    nodeId: ID!
  ): Node

  """Reads a set of `Bar`."""
  barsList(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Bar`."""
    orderBy: [BarsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: BarCondition
  ): [Bar!]

  """Reads a set of `Baz`."""
  bazsList(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Baz`."""
    orderBy: [BazsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: BazCondition
  ): [Baz!]

  """Reads a set of `Foo`."""
  foosList(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Foo`."""
    orderBy: [FoosOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FooCondition
  ): [Foo!]
  bar(id: Int!): Bar
  baz(id: Int!): Baz
  foo(bazId: Int!): Foo

  """Reads a single `Bar` using its globally unique `ID`."""
  barByNodeId(
    """The globally unique `ID` to be used in selecting a single `Bar`."""
    nodeId: ID!
  ): Bar

  """Reads a single `Baz` using its globally unique `ID`."""
  bazByNodeId(
    """The globally unique `ID` to be used in selecting a single `Baz`."""
    nodeId: ID!
  ): Baz

  """Reads a single `Foo` using its globally unique `ID`."""
  fooByNodeId(
    """The globally unique `ID` to be used in selecting a single `Foo`."""
    nodeId: ID!
  ): Foo
}
